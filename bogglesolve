#!/usr/bin/python
"""Boggle solver
Eric Jones

bogglesolve <dictionary file> <minimum word length> [<comma-separated row 1> <comma-separated row 2> ...]

First argument is the word list file
Second argument is the minimum word length
Subsequent arguments should be comma separated rows

Example:
bogglesolve dictionary.txt 4 f,i,r,s,t s,e,c,o,n t,h,i,r,d f,o,u,r,t f,i,f,t,h
"""

import sys
import re

# Store script 
helpstring = __doc__

# Sort output word list
sort = False

# Word length rubric
scores=[
0, #1
0, #2
1, #3
1, #4
2, #5
3, #6
5, #7
11 #8
]

# Interpret arguments

# Help
if len(sys.argv) < 4 or "--help" in sys.argv:
	print(__doc__)
	exit(1)

dictionaryfilepath = sys.argv[1]
minlength = int(sys.argv[2])
boardinput = sys.argv[3:]


# Define functions

def getword(array, board):
	"""Resolves a list of indices on the board to text."""
	word = ''
	for character in array:
		word += board[character[0]][character[1]]
	return word

def scoreword(word, rubric):
	"""Scores a word based on the rubric.  The word's length is the index of the rubric."""
	length = min(len(word),8)
	return rubric[length-1]

def buildlist(array, dictionary, board):
	"""Searches the board, for words in the dictionary by appending letters surrounding the index, and, if any search chains are promising, recursively searching along those."""
	# Working data
	wordlist=set()
	# Resolve chain of indices to text
	word = getword(array, board)
	# Compile a regular expression search for items beginning with the text
	r = re.compile('^'+word+'.*')
	# Search the dictionary for all matches
	matchingwords = list(filter(r.match, dictionary))
	# Act on matches by following their paths
	if len(matchingwords) !=0:
		if len(array) >= minlength:
			if word in matchingwords:
				wordlist.add(word)
		if len(matchingwords) > 1:
			x0=array[len(array)-1][0]
			y0=array[len(array)-1][1]
			for x in range(max(x0-1,0),min(x0+1,len(board)-1)+1):
				for y in range(max(y0-1,0),min(y0+1,len(board[x])-1)+1):
					if [x,y] not in array:
						# Search the new chain link and merge the items it finds with this iteration's set.  
						wordlist |= buildlist(array + [[x,y]], matchingwords, board)
	return wordlist

def readboard(csv):
	board=[]
	# Build board list
	for row in csv:
		board.append(row.split(','))
	return board

def readwordlist(f):
	"""Generates a scoring dictionary from a wordlist file."""
	with open(f) as dictionaryfile:
		dictionary = set(word.strip().lower() for word in dictionaryfile)
	return dictionary

def wordsearch(dictionary, board):
	"""Searches for words starting at each location on the board."""
	wordlist = set()
	for x in range(len(board)):
		for y in range(len(board[x])):
			wordlist |= buildlist([[x,y]], dictionary, board)
	return wordlist



# Read dictionary file
dictionary=readwordlist(dictionaryfilepath)

# Create board
board = readboard(boardinput)

# Search for words
wordlist=wordsearch(dictionary, board)

# Sort list
if sort:
	wordlist = sorted(wordlist)

# Score words
score=0
for word in wordlist:
	wordscore=scoreword(word, scores)
	score+=wordscore
	print(word, wordscore)

# Summarize
print('Found '+str(len(wordlist))+' words')
print('Score: '+str(score)+' points')